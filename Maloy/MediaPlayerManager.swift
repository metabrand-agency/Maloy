//
//  MediaPlayerManager.swift
//  Maloy
//
//  Apple Music integration using MediaPlayer (local library)
//  Works WITHOUT paid Developer account
//

import Foundation
import MediaPlayer
import Combine

class MediaPlayerManager: ObservableObject {
    @Published var isAuthorized = false
    @Published var currentSong: String?

    private let player = MPMusicPlayerController.systemMusicPlayer
    private var isInitialized = false

    init() {
        // Check authorization status on init
        checkAuthorization()
        setupNotifications()
    }

    deinit {
        // Clean up notifications
        NotificationCenter.default.removeObserver(self)
    }

    private func setupNotifications() {
        guard !isInitialized else { return }
        isInitialized = true

        // Listen for playback state changes
        NotificationCenter.default.addObserver(
            forName: .MPMusicPlayerControllerPlaybackStateDidChange,
            object: player,
            queue: .main
        ) { [weak self] _ in
            print("üéµ Playback state changed: \(self?.player.playbackState.rawValue ?? -1)")
        }

        player.beginGeneratingPlaybackNotifications()
    }

    // MARK: - Authorization

    /// Check and request Media Library authorization
    func checkAuthorization() {
        let status = MPMediaLibrary.authorizationStatus()

        switch status {
        case .authorized:
            self.isAuthorized = true
            print("‚úÖ Media Library authorized")
        case .denied, .restricted:
            self.isAuthorized = false
            print("‚ùå Media Library access denied/restricted")
        case .notDetermined:
            MPMediaLibrary.requestAuthorization { newStatus in
                DispatchQueue.main.async {
                    self.isAuthorized = (newStatus == .authorized)
                    if self.isAuthorized {
                        print("‚úÖ Media Library authorized after request")
                    } else {
                        print("‚ùå Media Library denied after request")
                    }
                }
            }
        @unknown default:
            self.isAuthorized = false
            print("‚ö†Ô∏è Unknown Media Library authorization status")
        }
    }

    // MARK: - Search and Playback

    /// Search for a song and play it
    func searchAndPlay(query: String, completion: @escaping (Bool, String) -> Void) {
        print("üéµ searchAndPlay called with query: \"\(query)\"")
        print("üéµ isAuthorized: \(isAuthorized)")

        guard isAuthorized else {
            print("‚ùå Media Library not authorized!")
            DispatchQueue.main.async {
                completion(false, "–ù—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            }
            return
        }

        // Run search in background to prevent blocking
        DispatchQueue.global(qos: .userInitiated).async {
            print("üîç Searching local library: \"\(query)\"")

            do {
                // Search for songs by artist
                let artistPredicate = MPMediaPropertyPredicate(value: query,
                                                               forProperty: MPMediaItemPropertyArtist,
                                                               comparisonType: .contains)

                let artistQuery = MPMediaQuery.songs()
                artistQuery.addFilterPredicate(artistPredicate)

                if let items = artistQuery.items, !items.isEmpty {
                    print("‚úÖ Found \(items.count) songs by artist")
                    DispatchQueue.main.async {
                        self.playItems(items, completion: completion)
                    }
                    return
                }

                // Try searching by song title if artist search failed
                print("üîç Artist not found, trying song title...")
                let titlePredicate = MPMediaPropertyPredicate(value: query,
                                                              forProperty: MPMediaItemPropertyTitle,
                                                              comparisonType: .contains)
                let titleQuery = MPMediaQuery.songs()
                titleQuery.addFilterPredicate(titlePredicate)

                if let titleItems = titleQuery.items, !titleItems.isEmpty {
                    print("‚úÖ Found \(titleItems.count) songs by title")
                    DispatchQueue.main.async {
                        self.playItems(titleItems, completion: completion)
                    }
                    return
                }

                // Nothing found
                print("‚ùå No songs found in library for: \(query)")
                DispatchQueue.main.async {
                    completion(false, "–ù–µ –Ω–∞—à—ë–ª '\(query)' –≤ —Ç–≤–æ–µ–π –º—É–∑—ã–∫–∞–ª—å–Ω–æ–π –±–∏–±–ª–∏–æ—Ç–µ–∫–µ. –î–æ–±–∞–≤—å —ç—Ç—É –º—É–∑—ã–∫—É –≤ Apple Music —Å–Ω–∞—á–∞–ª–∞.")
                }

            } catch {
                print("‚ùå Search error: \(error)")
                DispatchQueue.main.async {
                    completion(false, "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –º—É–∑—ã–∫–∏")
                }
            }
        }
    }

    private func playItems(_ items: [MPMediaItem], completion: @escaping (Bool, String) -> Void) {
        guard let firstItem = items.first else {
            completion(false, "–ù–µ—Ç —Ç—Ä–µ–∫–æ–≤")
            return
        }

        let songTitle = firstItem.title ?? "Unknown"
        let artistName = firstItem.artist ?? "Unknown Artist"
        print("‚úÖ Found: \(songTitle) - \(artistName)")

        do {
            // Stop current playback first
            player.stop()

            // Create collection and play
            let collection = MPMediaItemCollection(items: items)
            player.setQueue(with: collection)
            player.prepareToPlay()
            player.play()

            currentSong = "\(songTitle) - \(artistName)"
            print("üéµ Now playing: \(currentSong ?? "")")
            completion(true, "\(artistName), \(songTitle)")

        } catch {
            print("‚ùå Playback error: \(error)")
            completion(false, "–û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è")
        }
    }

    /// Play/Resume playback
    func play(completion: @escaping (Bool, String) -> Void) {
        player.play()
        completion(true, "–ü—Ä–æ–¥–æ–ª–∂–∞—é")
    }

    /// Pause playback
    func pause(completion: @escaping (Bool, String) -> Void) {
        player.pause()
        completion(true, "–ü–∞—É–∑–∞")
    }

    /// Skip to next track
    func next(completion: @escaping (Bool, String) -> Void) {
        player.skipToNextItem()
        if let nowPlaying = player.nowPlayingItem {
            let title = nowPlaying.title ?? "Unknown"
            let artist = nowPlaying.artist ?? "Unknown"
            completion(true, "\(artist), \(title)")
        } else {
            completion(true, "–°–ª–µ–¥—É—é—â–∏–π —Ç—Ä–µ–∫")
        }
    }

    /// Skip to previous track
    func previous(completion: @escaping (Bool, String) -> Void) {
        player.skipToPreviousItem()
        if let nowPlaying = player.nowPlayingItem {
            let title = nowPlaying.title ?? "Unknown"
            let artist = nowPlaying.artist ?? "Unknown"
            completion(true, "\(artist), \(title)")
        } else {
            completion(true, "–ü—Ä–µ–¥—ã–¥—É—â–∏–π —Ç—Ä–µ–∫")
        }
    }

    /// Stop playback completely
    func stop() {
        player.stop()
        currentSong = nil
        print("‚èπÔ∏è Playback stopped")
    }
}
