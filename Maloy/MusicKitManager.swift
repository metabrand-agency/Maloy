//
//  MusicKitManager.swift
//  Maloy
//
//  Apple Music integration using MusicKit
//  Provides embedded music player with full control
//

import Foundation
import MusicKit
import Combine

@available(iOS 15.0, *)
class MusicKitManager: ObservableObject {
    @Published var isAuthorized = false
    @Published var currentSong: String?

    private let player = ApplicationMusicPlayer.shared

    init() {
        // Check authorization status on init
        checkAuthorization()
    }

    // MARK: - Authorization

    /// Check and request MusicKit authorization
    func checkAuthorization() {
        Task {
            let status = await MusicAuthorization.request()

            await MainActor.run {
                switch status {
                case .authorized:
                    self.isAuthorized = true
                    print("‚úÖ MusicKit authorized")
                case .denied:
                    self.isAuthorized = false
                    print("‚ùå MusicKit access denied")
                case .restricted:
                    self.isAuthorized = false
                    print("‚ö†Ô∏è MusicKit access restricted")
                case .notDetermined:
                    self.isAuthorized = false
                    print("‚ö†Ô∏è MusicKit authorization not determined")
                @unknown default:
                    self.isAuthorized = false
                    print("‚ö†Ô∏è Unknown MusicKit authorization status")
                }
            }
        }
    }

    // MARK: - Search and Playback

    /// Search for a song and play it
    func searchAndPlay(query: String, completion: @escaping (Bool, String) -> Void) {
        print("üéµ searchAndPlay called with query: \"\(query)\"")
        print("üéµ isAuthorized: \(isAuthorized)")

        guard isAuthorized else {
            print("‚ùå MusicKit not authorized!")
            completion(false, "–ù—É–∂–µ–Ω –¥–æ—Å—Ç—É–ø –∫ Apple Music. –ü—Ä–æ–≤–µ—Ä—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            return
        }

        print("üîç Searching Apple Music: \"\(query)\"")

        Task {
            do {
                // Search for songs
                var request = MusicCatalogSearchRequest(term: query, types: [Song.self])
                request.limit = 1

                let response = try await request.response()

                guard let song = response.songs.first else {
                    await MainActor.run {
                        completion(false, "–ù–µ –Ω–∞—à—ë–ª –ø–µ—Å–Ω—é '\(query)' –≤ Apple Music")
                    }
                    return
                }

                let songTitle = song.title
                let artistName = song.artistName
                print("‚úÖ Found: \(songTitle) - \(artistName)")

                // Set player queue and play
                player.queue = [song]
                try await player.play()

                await MainActor.run {
                    self.currentSong = "\(songTitle) - \(artistName)"
                    completion(true, "–í–∫–ª—é—á–∞—é \(songTitle) ‚Äî \(artistName)")
                }

            } catch {
                print("‚ùå MusicKit search error: \(error)")
                await MainActor.run {
                    completion(false, "–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞: \(error.localizedDescription)")
                }
            }
        }
    }

    /// Play/Resume playback
    func play() {
        Task {
            do {
                try await player.play()
                print("‚ñ∂Ô∏è Resumed playback")
            } catch {
                print("‚ùå Play error: \(error)")
            }
        }
    }

    /// Pause playback
    func pause() {
        player.pause()
        print("‚è∏Ô∏è Paused playback")
    }

    /// Skip to next track
    func next() {
        Task {
            do {
                try await player.skipToNextEntry()
                print("‚è≠Ô∏è Skipped to next track")
            } catch {
                print("‚ùå Skip next error: \(error)")
            }
        }
    }

    /// Skip to previous track
    func previous() {
        Task {
            do {
                try await player.skipToPreviousEntry()
                print("‚èÆÔ∏è Skipped to previous track")
            } catch {
                print("‚ùå Skip previous error: \(error)")
            }
        }
    }

    /// Stop playback completely
    func stop() {
        player.stop()
        currentSong = nil
        print("‚èπÔ∏è Playback stopped")
    }
}
